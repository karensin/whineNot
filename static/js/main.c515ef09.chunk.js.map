{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","require","App","useState","useEffect","domain","a","get","withCredentials","headers","response","console","log","error","getUser","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4PAEMA,G,MAAQC,EAAQ,KAsFPC,MApFf,WAAgB,IAAD,EACWC,mBAAS,GADpB,gCAEqBA,oBAAS,IAF9B,mBA2Eb,OA3Ea,UAObC,qBAAU,WAER,IAAIC,EAAS,0KAFC,4CAId,4BAAAC,EAAA,+EAE2BN,EAAMO,IAAIF,EAAQ,CACvCG,iBAAiB,EACjBC,QAAS,CACP,8BAA+B,IAC/B,OAAU,mBACV,eAAgB,mBAChB,cAAiB,oDARzB,OAEUC,EAFV,OAWIC,QAAQC,IAAIF,GAXhB,gDAcIC,QAAQE,MAAR,MAdJ,0DAJc,0DAqBdC,KAoBC,IA4BD,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAAlB,UCrEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnB,GACLF,QAAQE,MAAMA,EAAMoB,c","file":"static/js/main.c515ef09.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './App.css';\nconst axios = require('axios');\n\nfunction App() {\n  const [page, setPage] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const API_KEY = \"7c242d580dd52bf8e0d0e49da4b923263630b26f\"\n\n\n\n  useEffect(() => {\n\n    let domain = 'https://api.globalwinescore.com/globalwinescores/latest/?wine_id=&vintage=2000&color=&is_primeurs=&lwin=1014033&lwin_11=10140332000&limit=100&offset=100&ordering=-date';\n\n    async function getUser() {\n      try {\n        const response = await axios.get(domain, {\n          withCredentials: true,\n          headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Accept': \"application/json\",\n            'Content-Type': \"application/json\",\n            'Authorization': \"Token 7c242d580dd52bf8e0d0e49da4b923263630b26f\"\n          },\n        });\n        console.log(response)\n      }\n      catch (error) {\n        console.error(error);\n      }\n    }\n    getUser()\n    // getUser()\n    // console.log('did u run')\n    // fetch(\n    //   domain, {\n    //   method: \"GET\",\n    //   headers: {\n    //     // Accept: \"application/json\",\n    //     'Content-Type': \"application/json\",\n    //     'Authorization': \"Token 7c242d580dd52bf8e0d0e49da4b923263630b26f\"\n    //   }\n    // }\n    // )\n    //   .then(res => res.json())\n    //   .then(response => {\n    //     console.log(response)\n    //     // setCommitHistory(response.items);\n    //     setIsLoading(false);\n    //   })\n    //   .catch(error => console.log(error));\n  }, []);\n  // async function requestData() {\n  //   try {\n  //     console.log('1')\n  // const res = await fetch(domain, {\n  //   withCredentials: true,\n  //   headers: {\n  //     'Accept': \"application/json\",\n  //     'Content-Type': \"application/json\",\n  //     'Authorization': \"Token 7c242d580dd52bf8e0d0e49da4b923263630b26f\"\n  //   },\n\n  //     });\n\n  //     console.log('2')\n\n  //     const jsonRes = await res.json();\n  //     console.log(jsonRes, 'jsonRes')\n  //     console.log('3')\n  //   } catch (error) {\n  //     console.log(error, 'error message')\n  //   }\n  // }\n  // requestData()\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        what\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}